import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'firebase_options.dart'; // Generated by Firebase CLI
import 'package:tes/app/routes/app_pages.dart'; // Import routes
import 'package:get_storage/get_storage.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:tes/app/modules/page/register/controllers/register_controller.dart';

final FlutterLocalNotificationsPlugin _localNotifications = FlutterLocalNotificationsPlugin();

// Handler for background notifications
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp();

  final AndroidNotificationDetails androidDetails = AndroidNotificationDetails(
    'channel_id',
    'channel_name',
    channelDescription: 'Deskripsi Channel',
    importance: Importance.max,
    priority: Priority.high,
    styleInformation: MessagingStyleInformation(
      Person(
        name: message.notification?.title ?? 'Notification',
        icon: const DrawableResourceAndroidIcon('@mipmap/ic_launcher'),
      ),
      messages: [
        Message(
          message.notification?.body ?? '',
          DateTime.now(),
          Person(name: 'Message', icon: const DrawableResourceAndroidIcon('@mipmap/ic_launcher')),
        ),
      ],
      groupConversation: true,
    ),
    timeoutAfter: 10000,
  );

  final NotificationDetails platformDetails = NotificationDetails(android: androidDetails);

  await _localNotifications.show(
    message.hashCode,
    message.notification?.title ?? "Notification",
    message.notification?.body ?? "You have a new message.",
    platformDetails,
  );
}

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  await GetStorage.init(); // Initialize GetStorage for local storage

  // Debug log untuk memeriksa isi storage saat aplikasi dimulai
  final box = GetStorage();
  print("Data di Get Storage saat startup: ${box.read('pending_registers')}");

  // Enable offline persistence for Firestore
  FirebaseFirestore.instance.settings = const Settings(persistenceEnabled: true);

  // Initialize local notifications
  const AndroidInitializationSettings androidInitSettings =
      AndroidInitializationSettings('@mipmap/ic_launcher');
  const InitializationSettings initSettings = InitializationSettings(android: androidInitSettings);

  await _localNotifications.initialize(
    initSettings,
    onDidReceiveNotificationResponse: (NotificationResponse response) {
      print("Notification tapped with payload: ${response.payload}");
    },
  );

  // Firebase Messaging for background notifications
  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

  // Check and upload pending data when the app starts
  uploadPendingDataOnStart();

  runApp(const MyApp());
}

void uploadPendingDataOnStart() async {
  final Connectivity connectivity = Connectivity();
  final RegisterController registerController = Get.put(RegisterController());

  var connectivityResult = await connectivity.checkConnectivity();
  if (connectivityResult != ConnectivityResult.none) {
    print("Koneksi tersedia saat startup. Mengunggah data pending...");
    registerController.uploadPendingRegisters();
  }

  connectivity.onConnectivityChanged.listen((List<ConnectivityResult> results) {
    print("Koneksi berubah: $results"); // Debug log
    if (results.any((result) => result != ConnectivityResult.none)) {
      print("Koneksi kembali online. Mengunggah data pending...");
      registerController.uploadPendingRegisters();
    }
  });
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return GetMaterialApp(
      debugShowCheckedModeBanner: false,
      title: "Coffee Shop",
      initialRoute: AppPages.INITIAL, 
      getPages: AppPages.routes,
    );
  }
}
